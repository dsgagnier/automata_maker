The primary purpose of this program is, given a high-valence graph \Gamma with a comprehensive loop \ell, producing the automaton generated by (\Gamma, \ell) and determining the strongly connected components thereof. However, this program allows for variations in the construction of the automata as well:
This program allows for different-length and same-length folds. (Eventually, functionality for partial folds should be added.)
This program allows for only looking at graphs in reduced Outer space.



MAKE NODES

A "node" refers to the edge of a graph. Each node has a
- name -> 'a' or 'b' or 'c'...
- head_list -> a list containing elements indicating the other nodes to which the head of the node is connected.
	For example, if ['c', 't', True], then the head of the node is connected to the tail ('t') of the node named 'c', and the loop on the graph containing self does (True) take this turn.
	For example, if ['d', 'h', False], then the head of the node is connected to the head ('h') of the node named 'd', and the loop on the graph containing self does not (False) take this turn. 
- tail_list -> a list containing the elements indicating the other nodes to which the tail of the node is connected. It is formatted the same as head_list.

The node constructor is in the module Node.

MAKE GRAPHS

A "graph" refers to a high-valence graph paired with a comprehensive loop on the graph. Each graph has:
- nodes -> a list of nodes, as generated in the Node module
- shape -> an optional parameter to describe the "shape" of the graph
- num -> an optional parameter to describe the "number" of the graph
- matrix -> an adjacency matrix with encodes (1) the structure of the graph and (2) the turns taken by the loop on the graph. 
	** This parameter is not supplied to the constructor
- can_get_to -> a list indicated with other graphs in the folder this graph can get to by applying permissible (also called "legal" in the program) folds.
	** This parameter is not supplied to the constructor

The node constructor is in the module Graph. 

GENERATE GRAPHS IN AUTOMATON

Given a folder with pickled files of graphs entitled "graph_0", "graph_1", etc., produce the states in the automaton generated by the graphs "graph_0", "graph_1", by running the function "get_all_states()" from module "make_states" with desired parameters.

GENERATE AUTOMATON INFORMATION

If a folder (assume throughout folder in entitled "states") contains the states of an automaton (as generated by make_states.get_all_states()), then (if not using partial folds):

Generate the dictionary
parts = strongly_connected_components.partition_states("states")
to partition the graphs based on number of edges. (If not using partial folds, the graphs in each strongly connected component will all share the number of edges.)

To get the adjacency matrix for each partition class (part_class), run
strongly_connected_components.partition_class_to_matrix(part_class, "states")

To get the strongly connected components of the automaton, run
strongly_connected_components.partitioned_get_scc(parts)

Functionality to be added for partial folds.